
/* Make it work in two ways, none of them is to remove `take(movable)` away from the code
*/
fn main() {
     let movable = Box::new(3);

     let consume = || {
         println!("`movable`: {:?}", movable);
         take(movable);
     };

     consume();
     
     // After first consume(), the value goes out of scope so move does not happen again
     
    //  consume();
}

fn take<T>(_v: T) {}



// Here '&' is used to call the value by reference
fn main() {
     let movable = Box::new(3);

     let consume =  || {
         println!("`movable`: {:?}", movable);
         take(&movable);
     };

     consume();
     consume();
}

fn take<T>(_v: T) {}

// we can also use move keyword and use '&' which will also work. 
