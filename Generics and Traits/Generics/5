

// first make value as 'T'
struct Val<T> {
    val: T,
}

// Now use 'T' for implement so that we can declare that value is not concrete type but 'T' type
// then using reference of 'T' to borrow the value

impl<T> Val<T> {
    fn value(&self) -> &T {
        &self.val
    }
}


fn main() {
    let x = Val{ val: 3.0 };
    let y = Val{ val: "hello".to_string()};
    println!("{}, {}", x.value(), y.value());
}
